const Product = require("../../models/Admin/productModel");
const Category = require("../../models/Admin/categoryModel");
const { Op } = require("sequelize");

class ProductController {

  // ‚úÖ L·∫•y danh s√°ch s·∫£n ph·∫©m (t√¨m ki·∫øm, l·ªçc, ph√¢n trang)
  static async get(req, res) {
    try {
      const page = parseInt(req.query.page) || 1;
      const limit = 10;
      const offset = (page - 1) * limit;
      const { search, status, category, sort, createdAt, deletedAt, deleted } =
        req.query;

      let where = {};

      if (search) {
        where.name = { [Op.like]: `%${search}%` };
      }
      if (status !== undefined && status !== "") {
        where.status = parseInt(status);
      }
      if (category && category !== "all") {
        where.idCategory = category;
      }

      // ‚úÖ N·∫øu ƒëang l·ªçc th√πng r√°c (deleted=true)
      const includeDeleted = deleted === "true";
      if (includeDeleted) {
        // L·ªçc theo ng√†y x√≥a n·∫øu c√≥
        if (deletedAt) {
          const date = new Date(deletedAt);
          const nextDate = new Date(date);
          nextDate.setDate(date.getDate() + 1);
          where.deletedAt = {
            [Op.gte]: date,
            [Op.lt]: nextDate,
          };
        } else {
          where.deletedAt = { [Op.ne]: null };
        }
      } else {
        // ‚úÖ L·ªçc theo ng√†y t·∫°o n·∫øu kh√¥ng ·ªü tab th√πng r√°c
        if (createdAt) {
          const date = new Date(createdAt);
          const nextDate = new Date(date);
          nextDate.setDate(date.getDate() + 1);
          where.createdAt = {
            [Op.gte]: date,
            [Op.lt]: nextDate,
          };
        }
      }

      // ‚úÖ X·ª≠ l√Ω s·∫Øp x·∫øp
      let order = [];
      if (sort === "asc") order.push(["price", "ASC"]);
      if (sort === "desc") order.push(["price", "DESC"]);

      const { count, rows } = await Product.findAndCountAll({
        where,
        limit,
        offset,
        order,
        include: [
          {
            model: Category,
            as: "category",
            attributes: ["id", "name", "status"],
            required: false, // ‚ùóÔ∏èƒê·ªÉ kh√¥ng l√†m m·∫•t s·∫£n ph·∫©m n·∫øu kh√¥ng c√≥ danh m·ª•c
          },
        ],
        attributes: [
          "id", "name","image", "price", "discount",
          "status", "quantity", "idCategory",
          "createdAt", "deletedAt"
        ],
        paranoid: !includeDeleted,
      });
      
      // ‚úÖ L·ªçc s·∫£n ph·∫©m c√≥ danh m·ª•c ƒëang ho·∫°t ƒë·ªông (status == 1)
      const filteredRows = rows.filter(p => p.category && p.category.status == 1);
      
      res.status(200).json({
        
        message: "L·∫•y danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng",
        data: filteredRows,
        total: filteredRows.length,
        page,
        totalPages: Math.ceil(count / limit), // ‚úÖ fix ƒë√∫ng ph√¢n trang
      });
      

    } catch (err) {
      console.error("üî• L·ªói l·∫•y danh s√°ch s·∫£n ph·∫©m:", err); // üëà in r√µ l·ªói
      res.status(500).json({ message: "L·ªói server", error: err.message });
    }
  }

  // ‚úÖ L·∫•y 1 s·∫£n ph·∫©m theo ID
  static async getById(req, res) {
    try {
      const product = await Product.findByPk(req.params.id, {
        include: [{ model: Category, as: "category" }],
      });
      if (!product) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      }
      res.status(200).json({ message: "L·∫•y th√†nh c√¥ng", data: product }); // ‚úÖ chu·∫©n
    } catch (err) {
      res.status(500).json({ message: "L·ªói server", error: err.message });
    }
  }

  // ‚úÖ T·∫°o s·∫£n ph·∫©m m·ªõi
  static async create(req, res) {
    try {
      const data = req.body;

      if (req.files?.image?.[0]) {
        data.image = req.files.image[0].filename;
      }

      // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã gi√° g·ªëc v√† gi·∫£m gi√°
      data.price = parseFloat(data.price);
      data.discount = parseFloat(data.discount);

      // T√≠nh gi√° sau gi·∫£m
      let finalPrice = data.price - data.discount;

      // Ki·ªÉm tra n·∫øu gi√° gi·∫£m kh√¥ng h·ª£p l·ªá (gi·∫£m qu√° m·ª©c ho·∫∑c gi√° kh√¥ng h·ª£p l·ªá)
      if (finalPrice < 0) {
        return res
          .status(400)
          .json({ message: "Gi√° sau gi·∫£m kh√¥ng th·ªÉ nh·ªè h∆°n 0." });
      }

     
      data.quantity = parseInt(data.quantity);
      data.status = parseInt(data.status);
      data.is_feature = parseInt(data.is_feature);

      // Danh m·ª•c: ki·ªÉm tra m·∫£ng ho·∫∑c chu·ªói
      if (!Array.isArray(data.categories)) {
        data.categories = [data.categories];
      }

      // G√°n idCategory (ch·ªçn ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n)
      data.idCategory = parseInt(data.categories[0]);

      const product = await Product.create({
        name: data.name,
        description: data.description,
        price: data.price,
        discount: data.discount,
        finalPrice: data.finalPrice, // L∆∞u gi√° sau gi·∫£m
        is_feature: data.is_feature,
        image: data.image,
        idCategory: data.idCategory,
        status: data.status,
        quantity: data.quantity,
      });

      res
        .status(201)
        .json({ message: "T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng", data: product });
    } catch (err) {
      console.error("üî• L·ªói t·∫°o s·∫£n ph·∫©m:", err);
      res
        .status(500)
        .json({ message: "T·∫°o s·∫£n ph·∫©m th·∫•t b·∫°i", error: err.message });
    }
  }

  static async update(req, res) {
    try {
      const { id } = req.params;
      const product = await Product.findByPk(id);

      if (!product) {
        return res
          .status(404)
          .json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
      }

      const data = req.body;

      // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã gi√° g·ªëc v√† gi·∫£m gi√°
      data.price = parseFloat(data.price) || 0;
      data.discount = parseFloat(data.discount) || 0;

      // T√≠nh gi√° sau gi·∫£m
      let finalPrice = data.price - data.discount;

      // Ki·ªÉm tra n·∫øu gi√° gi·∫£m kh√¥ng h·ª£p l·ªá
      if (finalPrice < 0) {
        return res
          .status(400)
          .json({
            success: false,
            message: "Gi√° sau gi·∫£m kh√¥ng th·ªÉ nh·ªè h∆°n 0.",
          });
      }

      data.finalPrice = finalPrice;
      data.quantity = parseInt(data.quantity) || 0;
      data.status = parseInt(data.status) || 0;
      data.is_feature = parseInt(data.is_feature) || 0;

      // X·ª≠ l√Ω h√¨nh ·∫£nh m·ªõi
      if (req.files?.image?.[0]) {
        data.image = req.files.image[0].filename;
      }
      // X·ª≠ l√Ω danh m·ª•c
      if (!Array.isArray(data.categories)) {
        data.categories = [data.categories];
      }
      data.idCategory = parseInt(data.categories[0]) || null;

      if (!data.idCategory) {
        return res
          .status(400)
          .json({ success: false, message: "Danh m·ª•c kh√¥ng h·ª£p l·ªá" });
      }

      // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
      await product.update(data);

      res.json({
        success: true,
        message: "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng",
        data: product,
      });
    } catch (err) {
      console.error("üî• L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err);
      res
        .status(500)
        .json({ success: false, message: "L·ªói server", error: err.message });
    }
  }

  // ‚úÖ X√≥a m·ªÅm
  static async delete(req, res) {
    try {
      const { id } = req.params;
      const product = await Product.findByPk(id);
      if (!product) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      }

      await product.destroy();
      res.status(200).json({ message: "X√≥a th√†nh c√¥ng" });
    } catch (err) {
      res.status(500).json({ message: "X√≥a th·∫•t b·∫°i", error: err.message });
    }
  }
  // ‚úÖ X√≥a nhi·ªÅu s·∫£n ph·∫©m (soft delete)
  static async deleteMultiple(req, res) {
    try {
      const { ids } = req.body;
      if (!ids || !Array.isArray(ids)) {
        return res.status(400).json({ message: "Danh s√°ch ID kh√¥ng h·ª£p l·ªá" });
      }

      const deleted = await Product.destroy({
        where: { id: ids },
      });

      res.status(200).json({
        message: "ƒê√£ chuy·ªÉn s·∫£n ph·∫©m v√†o th√πng r√°c",
        deletedCount: deleted,
      });
    } catch (err) {
      res.status(500).json({ message: "X√≥a th·∫•t b·∫°i", error: err.message });
    }
  }

  // ‚úÖ L·∫•y danh s√°ch ƒë√£ x√≥a
  static async trash(req, res) {
    try {
      const page = parseInt(req.query.page) || 1;
      const limit = 10;
      const offset = (page - 1) * limit;
      const { search, category } = req.query;

      let where = {};
      if (search) {
        where.name = { [Op.like]: `%${search}%` };
      }
      if (category && category !== "all") {
        where.idCategory = category;
      }
      where.deletedAt = { [Op.ne]: null };

      const { count, rows } = await Product.findAndCountAll({
        where,
        include: [{ model: Category, as: "category" }],
        limit,
        offset,
        paranoid: false,
      });

      res.status(200).json({
        message: "Danh s√°ch s·∫£n ph·∫©m ƒë√£ x√≥a",
        data: rows,
        total: count,
        page,
        totalPages: Math.ceil(count / limit),
      });
    } catch (err) {
      res.status(500).json({ message: "L·ªói server", error: err.message });
    }
  }
  // ‚úÖ X√≥a vƒ©nh vi·ªÖn 1 s·∫£n ph·∫©m
  static async forceDelete(req, res) {
    try {
      const { id } = req.params;
      const product = await Product.findByPk(id, { paranoid: false });
      if (!product) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      }

      await product.destroy({ force: true });
      res.status(200).json({ message: "X√≥a vƒ©nh vi·ªÖn th√†nh c√¥ng" });
    } catch (err) {
      res.status(500).json({ message: "X√≥a th·∫•t b·∫°i", error: err.message });
    }
  }

  // ‚úÖ X√≥a vƒ©nh vi·ªÖn nhi·ªÅu s·∫£n ph·∫©m
  static async forceDeleteMultiple(req, res) {
    try {
      const { ids } = req.body;
      if (!ids || !Array.isArray(ids)) {
        return res.status(400).json({ message: "Danh s√°ch ID kh√¥ng h·ª£p l·ªá" });
      }

      const deleted = await Product.destroy({
        where: { id: ids },
        force: true,
      });

      res
        .status(200)
        .json({ message: "ƒê√£ x√≥a vƒ©nh vi·ªÖn", deletedCount: deleted });
    } catch (err) {
      res.status(500).json({ message: "X√≥a th·∫•t b·∫°i", error: err.message });
    }
  }

  // ‚úÖ Kh√¥i ph·ª•c 1 s·∫£n ph·∫©m
  static async restore(req, res) {
    try {
      const { id } = req.params;
      const product = await Product.findByPk(id, { paranoid: false });
      if (!product) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
      }

      await product.restore();
      res.status(200).json({ message: "Kh√¥i ph·ª•c th√†nh c√¥ng", data: product });
    } catch (err) {
      res
        .status(500)
        .json({ message: "Kh√¥i ph·ª•c th·∫•t b·∫°i", error: err.message });
    }
  }

  // ‚úÖ Kh√¥i ph·ª•c nhi·ªÅu s·∫£n ph·∫©m
  static async restoreMultiple(req, res) {
    try {
      const { ids } = req.body;
      if (!ids || !Array.isArray(ids)) {
        return res.status(400).json({ message: "Danh s√°ch ID kh√¥ng h·ª£p l·ªá" });
      }

      const products = await Product.findAll({
        where: { id: ids },
        paranoid: false,
      });

      for (let product of products) {
        await product.restore();
      }

      res.status(200).json({ message: "Kh√¥i ph·ª•c nhi·ªÅu s·∫£n ph·∫©m th√†nh c√¥ng" });
    } catch (err) {
      res
        .status(500)
        .json({ message: "Kh√¥i ph·ª•c th·∫•t b·∫°i", error: err.message });
    }
  }
}

module.exports = ProductController;
